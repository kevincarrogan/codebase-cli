#!/usr/bin/python
import sys
import ConfigParser
import re
import requests
import tempfile
import os
import json
import functools
import collections

from datetime import datetime

from subprocess import call

from git.repo.base import Repo

config = ConfigParser.SafeConfigParser()
config.read('.cbconfig')

AUTH_USERNAME = config.get('auth', 'username')
AUTH_TOKEN = config.get('auth', 'token')
AUTH_CREDENTIALS = (AUTH_USERNAME, AUTH_TOKEN,)

PROJECT_NAME = config.get('project', 'name')

API_URL = 'https://api3.codebasehq.com/%s/' % PROJECT_NAME

EDITOR = os.environ.get('EDITOR', 'vim')


class CommandNotFound(Exception):
    pass


class Commander(object):

    def __init__(self):
        self.function_map = {}

    def command(self, *args):
        key = args

        def wrapper(func):
            self.function_map[key] = func
            return func

        return wrapper

    def help(self):
        print 'usage: cb [command]'
        print 'The available commands are:'
        for key in sorted(self.function_map):
            func = self.function_map[key]
            print '    %s %s' % (' '.join(key).ljust(20), func.func_doc)

    def run_command(self, command_args):
        command_found = False
        command_end = len(command_args)
        command = tuple(command_args[1:])
        if command == ('help',):
            commander.help()
        else:
            arguments = tuple(command_args[command_end:])
            while not command_found and command:
                try:
                    func = commander.function_map[command]
                except KeyError:
                    command_end = command_end - 1
                    command = tuple(command_args[1:command_end])
                    arguments = tuple(command_args[command_end:])
                else:
                    command_found = True
                    func(*arguments)
            if not command_found:
                raise CommandNotFound


commander = Commander()


authed_get = functools.partial(requests.get, auth=AUTH_CREDENTIALS)
authed_post = functools.partial(requests.post, auth=AUTH_CREDENTIALS)


def api_get(url):
    return json.loads(authed_get('%s%s.json' % (API_URL, url)))


def api_post(url, data):
    return authed_post(
                '%s%s' % (API_URL, url),
                data=data,
                headers={'content-type': 'application/xml'},
            )


def get_ticket_number():
    repo = Repo()

    branch_name = repo.active_branch.name
    try:
        return re.match('^(?:ticket-)?([0-9]+)', branch_name).groups()[0]
    except AttributeError:
        print 'Could not retrieve ticket number from branch name "%s".' % branch_name


@commander.command('status')
def status(ticket_number=None):
    '''Gets the status of the current ticket.'''
    if not ticket_number:
        ticket_no = get_ticket_number()
    else:
        ticket_no = ticket_number

    content = api_get('tickets/%s' % ticket_no)

    print content['ticket']['status']['name']


@commander.command('status', 'update')
def status_update(new_status=None):
    '''Sets the status of the ticket.'''
    ticket_no = get_ticket_number()

    invalid = False

    statuses = api_get('tickets/statuses')
    ids = {i: status['ticketing_status']['id'] for i, status in enumerate(statuses, 1)}

    if not new_status:
        print 'Please select an option:'
        for i, status in enumerate(statuses, 1):
            print '%d: %s' % (i, status['ticketing_status']['name'])
        try:
            status = int(raw_input('Please select from the above: '))
        except ValueError:
            invalid = True
    else:
        try:
            status = int(new_status)
        except ValueError:
            invalid = True

    if status not in range(1, len(statuses)) or invalid:
        print 'Unknown value'
    else:
        post_data = '<ticket-note><content></content><changes><status-id>%s</status-id></changes></ticket-note>' % ids[status]
        api_post('tickets/%s/notes' % ticket_no, post_data)


@commander.command('statuses')
def statuses():
    '''Gets the available statuses for a ticket.'''
    statuses = api_get('tickets/statuses')
    for i, status in enumerate(statuses, 1):
        print '%d: %s' % (i, status['ticketing_status']['name'])


def get_user_details():
    users = api_get('assignments')
    user_details = {}
    for user in users:
        user = user['user']
        user_details[user['id']] = {
            'first_name': user['first_name'],
            'last_name': user['last_name'],
        }

    return user_details


@commander.command('assign')
@commander.command('assigned')
def assigned():
    '''Gets the currently assigned user.'''
    ticket_no = get_ticket_number()

    user_details = get_user_details()
    content = api_get('tickets/%s' % ticket_no)
    assignee_id = content['ticket']['assignee_id']
    assignee_details = user_details[assignee_id]
    print '%s %s' % (assignee_details['first_name'], assignee_details['last_name'])


@commander.command('assign', 'update')
@commander.command('assigned', 'update')
def assigned_update(user):
    '''Sets the assigned user.'''
    pass


@commander.command('comments')
def comments():
    '''Gets a log of the comments.'''
    ticket_no = get_ticket_number()
    content = api_get('tickets/%s/notes' % ticket_no)
    user_details = get_user_details()
    for comment in content:
        comment = comment['ticket_note']
        created_at = datetime.strptime(comment['created_at'], '%Y-%m-%dT%H:%M:%SZ')
        content = comment['content']
        user_id = comment['user_id']
        updates = json.loads(comment['updates'])
        author_details = user_details[user_id]
        print 'Author: %s %s' % (author_details['first_name'], author_details['last_name'])
        print 'Date:   %s\n' % created_at.strftime('%c')
        if content:
            print content
            print ''
        if updates:
            if 'assignee_id' in updates:
                print 'Assignee changed from "%s" to "%s"' % (updates['assignee_id'][0], updates['assignee_id'][1])
            if 'status_id' in updates:
                print 'Status changed from "%s" to "%s"' % (updates['status_id'][0], updates['status_id'][1])
            if 'priority_id' in updates:
                print 'Priority changed from "%s" to "%s"' % (updates['priority_id'][0], updates['priority_id'][1])
            if 'category_id' in updates:
                print 'Category changed from "%s" to "%s"' % (updates['category_id'][0], updates['category_id'][1])
            if 'milestone_id' in updates:
                print 'Milestone changed from "%s" to "%s"' % (updates['milestone_id'][0], updates['milestone_id'][1])
            print ''


@commander.command('comment', 'update')
@commander.command('comments', 'update')
def comments_update(message=None):
    '''Creates a comment.'''
    if not message:
        with tempfile.NamedTemporaryFile() as comment_file:
            call([EDITOR, comment_file.name])
            with open(comment_file.name):
                comment_file_aux = open(comment_file.name)
                message = comment_file_aux.read()

    if message:
        post_data = '<ticket-note><content>%s</content><changes></changes></ticket-note>' % message
        api_post('tickets/%s/notes' % ticket_no, post_data)
    else:
        print 'Aborting due to empty update message'


if __name__ == "__main__":
    try:
        commander.run_command(sys.argv)
    except CommandNotFound:
        print 'Command not found'
    except TypeError:
        print 'Incorrect number of arguments'
